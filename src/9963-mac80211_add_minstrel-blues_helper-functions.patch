--- a/net/mac80211/tpc80211_blues.c
+++ b/net/mac80211/tpc80211_blues.c
@@ -18,3 +18,153 @@
  */
 
 #include "tpc80211_blues.h"
+
+/* lookup table to transform dBm [-20...39] in uW [10 .. 7940000] */
+static const u16 dBm2uW[10] = {1000, 1259, 1585, 1995, 2512, 3162, 3981, 5012,
+			       6310, 7943};
+
+/* convert dBm into mirco Watt (uW) to antilog tx power values */
+static unsigned int
+convert_dBm_to_uW(s8 power_dBm)
+{
+	u32 power_uW;
+
+	WARN_ON_ONCE(power_dBm < -20 || power_dBm >= 40);
+
+	if ((power_dBm >= -20) && (power_dBm < - 10))
+		power_uW = dBm2uW[power_dBm + 20] / 100;
+	else if (power_dBm < 0)
+		power_uW = dBm2uW[power_dBm + 10] / 10;
+	else if (power_dBm < 10)
+		power_uW = dBm2uW[power_dBm];
+	else if (power_dBm < 20)
+		power_uW = dBm2uW[power_dBm - 10] * 10;
+	else if (power_dBm < 30)
+		power_uW = dBm2uW[power_dBm - 20] * 100;
+	else if (power_dBm < 40)
+		power_uW = dBm2uW[power_dBm - 30] * 1000;
+	else
+		power_uW = 1000;
+
+	return power_uW;
+}
+
+/* Calculate EWMA of success probabilities */
+static void
+blues_calc_ewma(struct minstrel_rate *mr, u32 flags)
+{
+	struct blues_tpc_stats *tpc = &mr->tpc_stats;
+	u32 success_ratio;
+
+	/* update data power stats */
+	if (flags & EWMA_DATA_POWER) {
+		success_ratio = MINSTREL_FRAC(tpc->data_success,
+					      tpc->data_attempts);
+		tpc->data_prob = minstrel_ewma(tpc->data_prob,
+					       success_ratio, EWMA_LEVEL);
+		tpc->data_success = 0;
+		tpc->data_attempts = 0;
+	}
+
+	/* update sample power stats */
+	if (flags & EWMA_SAMPLE_POWER) {
+		success_ratio = MINSTREL_FRAC(tpc->sample_success,
+					      tpc->sample_attempts);
+		tpc->sample_prob = minstrel_ewma(tpc->sample_prob,
+						 success_ratio, EWMA_LEVEL);
+		tpc->sample_success = 0;
+		tpc->sample_attempts = 0;
+	}
+
+	/* update ref power stats */
+	if (flags & EWMA_REF_POWER) {
+		success_ratio = MINSTREL_FRAC(tpc->reference_success,
+					      tpc->reference_attempts);
+		tpc->reference_prob = minstrel_ewma(tpc->reference_prob,
+						    success_ratio, EWMA_LEVEL);
+		tpc->reference_success = 0;
+		tpc->reference_attempts = 0;
+	}
+}
+
+/* Reset all statistics to default */
+void
+blues_reset_stats(struct minstrel_rate *mr)
+{
+	struct blues_tpc_stats *tpc = &mr->tpc_stats;
+
+	tpc->reference_prob = MINSTREL_FRAC(TPC_INIT_REF_PROB, 100);
+	tpc->reference_success = tpc->reference_attempts = 0;
+	tpc->data_prob = MINSTREL_FRAC(TPC_INIT_DATA_PROB, 100);
+	tpc->data_success = tpc->data_attempts = 0;
+	tpc->sample_prob = MINSTREL_FRAC(TPC_INIT_SAMPLE_PROB, 100);
+	tpc->sample_success = tpc->sample_attempts = 0;
+	tpc->stats_outdated = 10;
+}
+
+/* Initialize or reset all TPC power-levels */
+void
+blues_reset_power(struct minstrel_priv *mp, struct minstrel_rate *mr)
+{
+	struct ieee80211_hw *hw = mp->hw;
+	struct blues_tpc_stats *tpc = &mr->tpc_stats;
+	s8 max_power_level = hw->conf.power_level;
+	s8 min_power_level = hw->min_txpower;
+
+	tpc->reference_power = max_power_level;
+	tpc->sample_power = max_power_level;
+	if (tpc->sample_power > min_power_level + TPC_SAMPLE_POWER_SPAN)
+		 tpc->sample_power -= TPC_SAMPLE_POWER_SPAN;
+	else
+		 tpc->sample_power = min_power_level;
+	// printk(KERN_ERR "blues_reset_power called for bitrate: %i.%i\n",
+	//	  mr->bitrate / 2, mr->bitrate % 2 ? 5 : 0);
+}
+
+void
+blues_count_tx_attempts(struct minstrel_rate *mr, int count, s8 power)
+{
+	struct blues_tpc_stats *tpc = &mr->tpc_stats;
+
+	if (power == tpc->reference_power) {
+		 tpc->reference_attempts += count;
+		 tpc->ref_att_hist += count;
+	}
+
+	if (power == tpc->sample_power + TPC_SAMPLE_POWER_SPAN)
+		 tpc->data_attempts += count;
+
+	if (power == tpc->sample_power) {
+		 tpc->sample_attempts += count;
+		 tpc->sample_att_hist += count;
+	}
+}
+
+void
+blues_count_tx_success(struct minstrel_rate *mr, int count, s8 power)
+{
+	struct blues_tpc_stats *tpc = &mr->tpc_stats;
+
+	if (power == tpc->reference_power) {
+		 tpc->reference_success += count;
+		 tpc->ref_succ_hist += count;
+	}
+
+	if (power == tpc->sample_power + TPC_SAMPLE_POWER_SPAN)
+		 tpc->data_success += count;
+
+	if (power == tpc->sample_power) {
+		 tpc->sample_success += count;
+		 tpc->sample_succ_hist += count;
+	}
+	//FIXME: should we really count this thing below?
+	if (power < tpc->sample_power) {
+		 tpc->sample_attempts += count;
+		 tpc->sample_success += count;
+	}
+	/*
+	* TODO: what about higher/lower power-levels ->
+	* only count if not/true successful ?
+	*/
+}
+
--- a/net/mac80211/rc80211_minstrel_ht.c
+++ b/net/mac80211/rc80211_minstrel_ht.c
@@ -247,7 +247,7 @@ minstrel_get_valid_vht_rates(int bw, int
 /*
  * Look up an MCS group index based on mac80211 rate information
  */
-static int
+int
 minstrel_ht_get_group_idx(struct ieee80211_tx_rate *rate)
 {
 	return GROUP_IDX((rate->idx / 8) + 1,
@@ -255,7 +255,7 @@ minstrel_ht_get_group_idx(struct ieee802
 			 !!(rate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH));
 }
 
-static int
+int
 minstrel_vht_get_group_idx(struct ieee80211_tx_rate *rate)
 {
 	return VHT_GROUP_IDX(ieee80211_rate_get_vht_nss(rate),
--- a/net/mac80211/rc80211_minstrel_ht.h
+++ b/net/mac80211/rc80211_minstrel_ht.h
@@ -122,5 +122,7 @@ struct minstrel_ht_sta_priv {
 void minstrel_ht_add_sta_debugfs(void *priv, void *priv_sta, struct dentry *dir);
 int minstrel_ht_get_tp_avg(struct minstrel_ht_sta *mi, int group, int rate,
 			   int prob_ewma);
+int minstrel_ht_get_group_idx(struct ieee80211_tx_rate *rate);
+int minstrel_vht_get_group_idx(struct ieee80211_tx_rate *rate);
 
 #endif
