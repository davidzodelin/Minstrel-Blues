--- a/net/mac80211/tpc80211_blues.c
+++ b/net/mac80211/tpc80211_blues.c
@@ -18,3 +18,34 @@
  */
 
 #include "tpc80211_blues.h"
+
+/* lookup table to transform dBm [-20...39] in uW [10 .. 7940000] */
+static const u16 dBm2uW[10] = {1000, 1259, 1585, 1995, 2512, 3162, 3981, 5012,
+			       6310, 7943};
+
+/* convert dBm into mirco Watt (uW) to antilog tx power values */
+static unsigned int
+convert_dBm_to_uW(s8 power_dBm)
+{
+	u32 power_uW;
+
+	WARN_ON_ONCE(power_dBm < -20 || power_dBm >= 40);
+
+	if ((power_dBm >= -20) && (power_dBm < - 10))
+		power_uW = dBm2uW[power_dBm + 20] / 100;
+	else if (power_dBm < 0)
+		power_uW = dBm2uW[power_dBm + 10] / 10;
+	else if (power_dBm < 10)
+		power_uW = dBm2uW[power_dBm];
+	else if (power_dBm < 20)
+		power_uW = dBm2uW[power_dBm - 10] * 10;
+	else if (power_dBm < 30)
+		power_uW = dBm2uW[power_dBm - 20] * 100;
+	else if (power_dBm < 40)
+		power_uW = dBm2uW[power_dBm - 30] * 1000;
+	else
+		power_uW = 1000;
+
+	return power_uW;
+}
+
--- a/net/mac80211/rc80211_minstrel_ht.c
+++ b/net/mac80211/rc80211_minstrel_ht.c
@@ -247,7 +247,7 @@ minstrel_get_valid_vht_rates(int bw, int
 /*
  * Look up an MCS group index based on mac80211 rate information
  */
-static int
+int
 minstrel_ht_get_group_idx(struct ieee80211_tx_rate *rate)
 {
 	return GROUP_IDX((rate->idx / 8) + 1,
@@ -255,7 +255,7 @@ minstrel_ht_get_group_idx(struct ieee802
 			 !!(rate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH));
 }
 
-static int
+int
 minstrel_vht_get_group_idx(struct ieee80211_tx_rate *rate)
 {
 	return VHT_GROUP_IDX(ieee80211_rate_get_vht_nss(rate),
--- a/net/mac80211/rc80211_minstrel_ht.h
+++ b/net/mac80211/rc80211_minstrel_ht.h
@@ -122,5 +122,7 @@ struct minstrel_ht_sta_priv {
 void minstrel_ht_add_sta_debugfs(void *priv, void *priv_sta, struct dentry *dir);
 int minstrel_ht_get_tp_avg(struct minstrel_ht_sta *mi, int group, int rate,
 			   int prob_ewma);
+int minstrel_ht_get_group_idx(struct ieee80211_tx_rate *rate);
+int minstrel_vht_get_group_idx(struct ieee80211_tx_rate *rate);
 
 #endif
