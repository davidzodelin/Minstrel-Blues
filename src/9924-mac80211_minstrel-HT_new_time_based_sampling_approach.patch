--- a/net/mac80211/rc80211_minstrel_ht.c
+++ b/net/mac80211/rc80211_minstrel_ht.c
@@ -318,12 +318,12 @@ minstrel_ht_get_tp_avg(struct minstrel_h
 		 minstrel_mcs_groups[group].shift;
 
 	/*
-	 * For the throughput calculation, limit the probability value to 90% to
+	 * For the throughput calculation, limit the probability value to 95% to
 	 * account for collision related packet error rate fluctuation
 	 * (prob is scaled - see MINSTREL_FRAC above)
 	 */
-	if (prob_ewma > MINSTREL_FRAC(90, 100))
-		return MINSTREL_TRUNC(100000 * ((MINSTREL_FRAC(90, 100) * 1000)
+	if (prob_ewma > MINSTREL_FRAC(95, 100))
+		return MINSTREL_TRUNC(100000 * ((MINSTREL_FRAC(95, 100) * 1000)
 								      / nsecs));
 	else
 		return MINSTREL_TRUNC(100000 * ((prob_ewma * 1000) / nsecs));
@@ -465,9 +465,6 @@ minstrel_ht_update_stats(struct minstrel
 		mi->ampdu_packets = 0;
 	}
 
-	mi->sample_slow = 0;
-	mi->sample_count = 0;
-
 	/* Initialize global rate indexes */
 	for(j = 0; j < MAX_THR_RATES; j++){
 		tmp_mcs_tp_rate[j] = 0;
@@ -481,8 +478,6 @@ minstrel_ht_update_stats(struct minstrel
 		if (!mi->supported[group])
 			continue;
 
-		mi->sample_count++;
-
 		for (i = 0; i < MCS_GROUP_RATES; i++) {
 			if (!(mi->supported[group] & BIT(i)))
 				continue;
@@ -515,9 +510,6 @@ minstrel_ht_update_stats(struct minstrel
 	minstrel_ht_assign_best_tp_rates(mi, tmp_mcs_tp_rate, tmp_cck_tp_rate);
 	memcpy(mi->max_tp_rate, tmp_mcs_tp_rate, sizeof(mi->max_tp_rate));
 
-	/* try to sample all available rates during each interval */
-	mi->sample_count *= 8;
-
 #ifdef CPTCFG_MAC80211_DEBUGFS
 	/* use fixed index if set */
 	if (mp->fixed_rate_idx != -1) {
@@ -735,12 +727,6 @@ minstrel_ht_tx_status(void *priv, struct
 	mi->ampdu_packets++;
 	mi->ampdu_len += info->status.ampdu_len;
 
-	if (!mi->sample_wait && !mi->sample_tries && mi->sample_count > 0) {
-		mi->sample_wait = 16 + 2 * MINSTREL_TRUNC(mi->avg_ampdu_len);
-		mi->sample_tries = 1;
-		mi->sample_count--;
-	}
-
 	if (info->flags & IEEE80211_TX_CTL_RATE_CTRL_PROBE)
 		mi->sample_packets += info->status.ampdu_len;
 
@@ -985,98 +971,144 @@ minstrel_ht_update_rates(struct minstrel
 }
 
 static int
-minstrel_get_sample_rate(struct minstrel_priv *mp, struct minstrel_ht_sta *mi)
+minstrel_ht_get_next_sample(struct minstrel_ht_sta *mi)
 {
-	struct minstrel_rate_stats *mrs;
 	struct minstrel_mcs_group_data *mg;
-	unsigned int sample_dur, sample_group, cur_max_tp_streams;
-	int tp_rate1, tp_rate2;
-	int sample_idx = 0;
-
-	if (mi->sample_wait > 0) {
-		mi->sample_wait--;
-		return -1;
-	}
-
-	if (!mi->sample_tries)
-		return -1;
+	unsigned int sample_group;
+	unsigned int sample_idx = 0;
+	unsigned int sample_rate = 0;
 
 	sample_group = mi->sample_group;
 	mg = &mi->groups[sample_group];
 	sample_idx = sample_table[mg->column][mg->index];
 	minstrel_set_next_sample_idx(mi);
 
-	if (!(mi->supported[sample_group] & BIT(sample_idx)))
-		return -1;
+	while (!(mi->supported[sample_group] & BIT(sample_idx))) {
+		sample_group = mi->sample_group;
+		mg = &mi->groups[sample_group];
+		sample_idx = sample_table[mg->column][mg->index];
+		minstrel_set_next_sample_idx(mi);
+	}
+
+	sample_rate = sample_group * MCS_GROUP_RATES + sample_idx;
+	return sample_rate;
+}
 
-	mrs = &mg->rates[sample_idx];
-	sample_idx += sample_group * MCS_GROUP_RATES;
+/* Check whether rate sampling is required */
+static inline bool
+minstrel_ht_requires_sampling(struct minstrel_ht_sta *mi,
+			      struct minstrel_priv *mp,
+			      bool mrr_capable)
+{
+	int rate_sampling_interval;
+	int intersample_delta;
+
+	/* check multi-rate-retry capabilities & adjust sampling interval */
+	if (mrr_capable)
+		rate_sampling_interval = RATE_SAMPLING_INT;
+	else
+		rate_sampling_interval = RATE_SAMPLING_INT * 2;
 
-	/* Set tp_rate1, tp_rate2 to the highest / second highest max_tp_rate */
-	if (minstrel_get_duration(mi->max_tp_rate[0]) >
-	    minstrel_get_duration(mi->max_tp_rate[1])) {
-		tp_rate1 = mi->max_tp_rate[1];
-		tp_rate2 = mi->max_tp_rate[0];
+	intersample_delta = mi->sample_packets - mi->cur_rc_intersample_spacing;
+	if (intersample_delta >= MIN_INTERSAMPLE_SPACING &&
+	    (time_after(jiffies, mi->last_rate_update +
+	    (rate_sampling_interval * HZ) / 1000))) {
+		mi->cur_rc_intersample_spacing = mi->sample_packets;
+		mi->last_rate_update = jiffies;
+		return true;
 	} else {
-		tp_rate1 = mi->max_tp_rate[0];
-		tp_rate2 = mi->max_tp_rate[1];
+		return false;
 	}
+}
 
-	/*
-	 * Sampling might add some overhead (RTS, no aggregation)
-	 * to the frame. Hence, don't use sampling for the highest currently
-	 * used highest throughput or probability rate.
-	 */
-	if (sample_idx == mi->max_tp_rate[0] || sample_idx == mi->max_prob_rate)
-		return -1;
+static inline int
+minstrel_ht_find_sample_rate(struct minstrel_ht_sta *mi,
+			     struct minstrel_priv *mp, int i, int random_skipp)
+{
+	int sample_rate, s_idx, s_group, s_dur, s_skipped, s_prob, s_max_tp;
+	int tmp_group, tmp_idx, tmp_prob, cur_min_tp, cur_max_tp, cur_tp;
 
-	/*
-	 * Do not sample if the probability is already higher than 95%,
-	 * or if the rate is 3 times slower than the current max probability
-	 * rate, to avoid wasting airtime.
-	 */
-	sample_dur = minstrel_get_duration(sample_idx);
-	if (mrs->prob_ewma > MINSTREL_FRAC(95, 100) ||
-	    minstrel_get_duration(mi->max_prob_rate) * 3 < sample_dur)
+	sample_rate = minstrel_ht_get_next_sample(mi);
+	s_idx = sample_rate % MCS_GROUP_RATES;
+	s_group = sample_rate / MCS_GROUP_RATES;
+	s_dur = minstrel_get_duration(sample_rate); //duration or throughput ?
+	s_skipped = mi->groups[s_group].rates[s_idx].sample_skipped;
+	s_prob = mi->groups[s_group].rates[s_idx].prob_ewma;
+	s_max_tp = minstrel_ht_get_tp_avg(mi, s_group, s_idx,
+					  MINSTREL_FRAC(100, 100));
+
+	tmp_group = mi->max_tp_rate[0] / MCS_GROUP_RATES;
+	tmp_idx = mi->max_tp_rate[0] % MCS_GROUP_RATES;
+	tmp_prob = mi->groups[tmp_group].rates[tmp_idx].prob_ewma;
+	cur_tp = minstrel_ht_get_tp_avg(mi, tmp_group, tmp_idx, tmp_prob);
+	cur_max_tp = minstrel_ht_get_tp_avg(mi, tmp_group, tmp_idx,
+					    MINSTREL_FRAC(100, 100));
+	tmp_group = mi->max_tp_rate[1] / MCS_GROUP_RATES;
+	tmp_idx = mi->max_tp_rate[1] % MCS_GROUP_RATES;
+	tmp_prob = mi->groups[tmp_group].rates[tmp_idx].prob_ewma;
+	cur_min_tp = minstrel_ht_get_tp_avg(mi, tmp_group, tmp_idx, tmp_prob);
+
+	/* if no sample attempts happened, do initial sampling */
+	if (mi->groups[s_group].rates[s_idx].att_hist < 3)
+		return sample_rate;
+
+	/* skip current max_tp_rate for sampling */
+	if (sample_rate == mi->max_tp_rate[0])
 		return -1;
 
-	/*
-	 * Make sure that lower rates get sampled only occasionally,
-	 * if the link is working perfectly.
-	 */
+	/* sample fallback rates less with respect to mrr stages */
+	if ((s_skipped < random_skipp / 2) &&
+	    (((mp->hw->max_rates == 4) &&
+	    ((sample_rate == mi->max_tp_rate[1]) ||
+	    (sample_rate == mi->max_tp_rate[2]) ||
+	    (sample_rate == mi->max_tp_rate[3]))) ||
+	    ((mp->hw->max_rates == 3) &&
+	    ((sample_rate == mi->max_tp_rate[1]) ||
+	    (sample_rate == mi->max_tp_rate[2]))) ||
+	    ((mp->hw->max_rates == 2) &&
+	    (sample_rate == mi->max_tp_rate[1])))) {
+		mi->groups[s_group].rates[s_idx].sample_skipped++;
+		return -1;
+	}
 
-	cur_max_tp_streams = minstrel_mcs_groups[tp_rate1 /
-		MCS_GROUP_RATES].streams;
-	if (sample_dur >= minstrel_get_duration(tp_rate2) &&
-	    (cur_max_tp_streams - 1 <
-	     minstrel_mcs_groups[sample_group].streams ||
-	     sample_dur >= minstrel_get_duration(mi->max_prob_rate))) {
-		if (mrs->sample_skipped < 20)
-			return -1;
+	/* Reduce sampling of rates 1.5x faster or slower */
+	if ((s_skipped < random_skipp) &&
+	    ((s_max_tp * 10 > 15 * cur_max_tp) ||
+	     (s_max_tp * 15 < 10 * cur_min_tp))) {
+		mi->groups[s_group].rates[s_idx].sample_skipped++;
+		return -1;
+	}
 
-		if (mi->sample_slow++ > 2)
-			return -1;
+	/* Reduce sampling of rates that do not perform or are too fast */
+	if ((s_skipped < random_skipp + 30) &&
+	    ((s_prob < MINSTREL_FRAC(10, 100)) ||
+	     (s_max_tp * 2 < cur_tp))) {
+		mi->groups[s_group].rates[s_idx].sample_skipped++;
+		return -1;
 	}
-	mi->sample_tries--;
 
-	return sample_idx;
+	return sample_rate;
 }
 
 static void
 minstrel_ht_get_rate(void *priv, struct ieee80211_sta *sta, void *priv_sta,
                      struct ieee80211_tx_rate_control *txrc)
 {
-	const struct mcs_group *sample_group;
+	const struct mcs_group *sample_rate_group;
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(txrc->skb);
-	struct ieee80211_tx_rate *rate = &info->status.rates[0];
+	struct ieee80211_tx_rate *sampling_setup = NULL;
 	struct minstrel_ht_sta_priv *msp = priv_sta;
 	struct minstrel_ht_sta *mi = &msp->ht;
 	struct minstrel_priv *mp = priv;
-	int sample_idx;
+	int max_r, s_group, s_idx, i, random_skipp;
+	int sample_rate = -1;
+	bool mrr_capable = false;
 
+	/* management/no-ack frames do not use rate control */
 	if (rate_control_send_low(sta, priv_sta, txrc))
 		return;
 
+	/* legacy packets (non 802.11n/ac) are handled by minstrel rc */
 	if (!msp->is_ht)
 		return mac80211_minstrel.get_rate(priv, sta, &msp->legacy, txrc);
 
@@ -1094,42 +1126,73 @@ minstrel_ht_get_rate(void *priv, struct
 	/* Don't use EAPOL frames for sampling on non-mrr hw */
 	if (mp->hw->max_rates == 1 &&
 	    (info->control.flags & IEEE80211_TX_CTRL_PORT_CTRL_PROTO))
-		sample_idx = -1;
-	else
-		sample_idx = minstrel_get_sample_rate(mp, mi);
+		return;
 
+	/* increase sum packet counter */
 	mi->total_packets++;
 
 	/* wraparound */
 	if (mi->total_packets == ~0) {
 		mi->total_packets = 0;
 		mi->sample_packets = 0;
+		mi->cur_rc_intersample_spacing = 0;
 	}
 
-	if (sample_idx < 0)
-		return;
-
-	sample_group = &minstrel_mcs_groups[sample_idx / MCS_GROUP_RATES];
-	sample_idx %= MCS_GROUP_RATES;
-
-	if (sample_group == &minstrel_mcs_groups[MINSTREL_CCK_GROUP] &&
-	    (sample_idx >= 4) != txrc->short_preamble)
-		return;
+	mrr_capable = mp->has_mrr && !txrc->rts &&
+					!txrc->bss_conf->use_cts_prot;
 
-	info->flags |= IEEE80211_TX_CTL_RATE_CTRL_PROBE;
-	rate->count = 1;
+	if (unlikely(minstrel_ht_requires_sampling(mi, mp, mrr_capable))) {
+		 /* generate random packet skip interval */
+		random_skipp = (u32)(((u64) prandom_u32() *
+						RATE_SAMPLING_INT) >> 32);
+
+		/* find rate that is worth sampling */
+		max_r = MCS_GROUP_RATES * ARRAY_SIZE(minstrel_mcs_groups) + 1;
+		for (i = max_r; i != 0; i--) {
+			sample_rate = minstrel_ht_find_sample_rate(mi, mp, i,
+								   random_skipp);
+			if (sample_rate < 0)
+				continue;
+			else
+				break;
+		}
 
-	if (sample_group == &minstrel_mcs_groups[MINSTREL_CCK_GROUP]) {
-		int idx = sample_idx % ARRAY_SIZE(mp->cck_rates);
-		rate->idx = mp->cck_rates[idx];
-	} else if (sample_group->flags & IEEE80211_TX_RC_VHT_MCS) {
-		ieee80211_rate_set_vht(rate, sample_idx % MCS_GROUP_RATES,
-				       sample_group->streams);
+		/* if no sampling rate is found, skip sampling attempt */
+		if (i == 0)
+			return;
+
+		/* annotate rate sampling with selected rate */
+		s_idx = sample_rate % MCS_GROUP_RATES;
+		s_group = sample_rate / MCS_GROUP_RATES;
+		mi->groups[s_group].rates[s_idx].sample_skipped = 0;
+		sampling_setup = &info->control.rates[0];
+		mi->sample_packets++;
+		info->flags |= IEEE80211_TX_CTL_RATE_CTRL_PROBE;
+
+		/* assign proper sampling parameters */
+		sampling_setup->count = 1;
+		if (minstrel_mcs_groups[s_group].flags & IEEE80211_TX_RC_MCS) {
+			sample_rate_group = &minstrel_mcs_groups[s_group];
+			sampling_setup->idx = s_idx +
+					(sample_rate_group->streams - 1) * 8;
+			sampling_setup->flags =minstrel_mcs_groups[s_group].flags;
+			return;
+		} else if (minstrel_mcs_groups[s_group].flags &
+			   IEEE80211_TX_RC_VHT_MCS) {
+			ieee80211_rate_set_vht(sampling_setup, s_idx,
+					minstrel_mcs_groups[s_group].streams);
+			sampling_setup->flags = minstrel_mcs_groups[s_group].flags;
+			return;
+		} else {
+			int idx = sample_rate % ARRAY_SIZE(mp->cck_rates);
+			sampling_setup->idx = mp->cck_rates[idx];
+			sampling_setup->flags = 0;
+			return;
+		}
 	} else {
-		rate->idx = sample_idx + (sample_group->streams - 1) * 8;
+		/* no rate sampling required */
+		return;
 	}
-
-	rate->flags = sample_group->flags;
 }
 
 static void
@@ -1202,16 +1265,6 @@ minstrel_ht_update_caps(void *priv, stru
 
 	mi->avg_ampdu_len = MINSTREL_FRAC(1, 1);
 
-	/* When using MRR, sample more on the first attempt, without delay */
-	if (mp->has_mrr) {
-		mi->sample_count = 16;
-		mi->sample_wait = 0;
-	} else {
-		mi->sample_count = 8;
-		mi->sample_wait = 8;
-	}
-	mi->sample_tries = 4;
-
 	if (!use_vht) {
 		stbc = (ht_cap & IEEE80211_HT_CAP_RX_STBC) >>
 			IEEE80211_HT_CAP_RX_STBC_SHIFT;
@@ -1324,7 +1377,10 @@ minstrel_ht_rate_init(void *priv, struct
 		      struct cfg80211_chan_def *chandef,
                       struct ieee80211_sta *sta, void *priv_sta)
 {
+	struct minstrel_ht_sta_priv *msp = priv_sta;
+
 	minstrel_ht_update_caps(priv, sband, chandef, sta, priv_sta);
+	msp->ht.last_rate_update = jiffies;
 }
 
 static void
--- a/net/mac80211/rc80211_minstrel_ht.h
+++ b/net/mac80211/rc80211_minstrel_ht.h
@@ -66,6 +66,12 @@ struct minstrel_ht_sta {
 	/* time of last status update */
 	unsigned long last_stats_update;
 
+	/* time of last rate sampling update */
+	unsigned long last_rate_update;
+
+	/* min # of packets between sample attempts */
+	u8 cur_rc_intersample_spacing;
+
 	/* overhead time in usec for each frame */
 	unsigned int overhead;
 	unsigned int overhead_rtscts;
@@ -77,11 +83,6 @@ struct minstrel_ht_sta {
 	u32 tx_flags;
 	u8 stream_errors;
 
-	u8 sample_wait;
-	u8 sample_tries;
-	u8 sample_count;
-	u8 sample_slow;
-
 	/* current MCS group to be sampled */
 	u8 sample_group;
 
